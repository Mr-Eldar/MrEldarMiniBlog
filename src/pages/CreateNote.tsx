import axios from 'axios';
import React, { useContext, useState } from 'react';
import { useNavigate } from 'react-router-dom';

import { FilterCategoriesContext } from '../App';
import { Notification } from '../Components/Notification';
import { formatText } from '../utils/formatter';

import type { Post } from '../types/post';

import { Check, X } from 'lucide-react';

export const CreateNote = () => {
	const { filterCategories } = useContext(FilterCategoriesContext);
	const [title, setTitle] = useState('');
	const [miniDescription, setMiniDescription] = useState('');
	const [fullDescription, setFullDescription] = useState('');
   const [postCategory, setPostCategory] = useState('');
	const [isLoading, setIsLoading] = useState(false);
	const [showPreview, setShowPreview] = useState(false);
	const [showNotification, setShowNotification] = useState(false);
	const [notificationStatus, setNotificationStatus] = useState<
		'success' | 'error'
	>('success');
	const navigate = useNavigate();

	const TimerGoToHome = () => {
		const timer = setTimeout(() => {
			navigate('/');
		}, 4000);
		return () => clearTimeout(timer);
	};

	const handleSubmit = async (e: React.FormEvent) => {
		e.preventDefault();
		setIsLoading(true);

		try {
			if (
				title.length === 0 ||
				miniDescription.length === 0 ||
				fullDescription.length === 0
			) {
				alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
				return;
			}

			await axios.post<Post>(
				'https://68acc47fb996fea1c08ad7b2.mockapi.io/notes',
				{
					title,
					miniDescription,
					fullDescription,
               postCategory: postCategory || 'general',
					createdAt: new Date().toISOString(),
				}
			);

			setNotificationStatus('success');
			setShowNotification(true);
			TimerGoToHome();
		} catch (error) {
			setNotificationStatus('error');
			setShowNotification(true);
			TimerGoToHome();
		} finally {
			setIsLoading(false);
		}
	};

	const formatButtons = [
		{ symbol: '**B**', tooltip: '–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç', insert: '**—Ç–µ–∫—Å—Ç**' },
		{ symbol: '*I*', tooltip: '–ö—É—Ä—Å–∏–≤', insert: '*—Ç–µ–∫—Å—Ç*' },
		{ symbol: '[L]', tooltip: '–°—Å—ã–ª–∫–∞', insert: '[—Ç–µ–∫—Å—Ç](url)' },
		{ symbol: '![Img]', tooltip: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', insert: '!(–æ–ø–∏—Å–∞–Ω–∏–µ)(url)' },
		{ symbol: 'H1', tooltip: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 1', insert: '# –ó–∞–≥–æ–ª–æ–≤–æ–∫' },
		{ symbol: 'H2', tooltip: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 2', insert: '## –ó–∞–≥–æ–ª–æ–≤–æ–∫' },
		{ symbol: 'H3', tooltip: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ 3', insert: '### –ó–∞–≥–æ–ª–æ–≤–æ–∫' },
		{ symbol: '‚Ä¢', tooltip: '–°–ø–∏—Å–æ–∫', insert: '- –ø—É–Ω–∫—Ç' },
		{ symbol: '>', tooltip: '–¶–∏—Ç–∞—Ç–∞', insert: '> —Ü–∏—Ç–∞—Ç–∞' },
		{ symbol: '---', tooltip: '–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å', insert: '---' },
		{ symbol: '[!]', tooltip: '–ë–µ–π–¥–∂', insert: '{!–º–µ—Ç–∫–∞}' },
		{ symbol: '</>', tooltip: '–ö–æ–¥', insert: '```–∫–æ–¥```' },
	];

	const insertFormat = (text: string) => {
		setFullDescription(prev => prev + text + '\n');
	};

	return (
		<div className='w-full h-auto pt-10 transition-colors'>
			{/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
			{(notificationStatus === 'success' && showNotification && (
				<Notification
					notificationIcon={
						<Check className='w-[50px] h-[50px] text-[var(--color)]' />
					}
					notificationName='–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ'
					notificationContent='–ü–æ—Å—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–¥.'
					showNotification={showNotification}
					onClose={() => setShowNotification(false)}
				/>
			)) ||
				(notificationStatus === 'error' && showNotification && (
					<Notification
						notificationIcon={
							<X className='w-[50px] h-[50px] text-[var(--color)]' />
						}
						notificationName='–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! ü§ï'
						notificationContent='–ü–æ—Å—Ç –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–¥.'
						showNotification={showNotification}
						onClose={() => setShowNotification(false)}
					/>
				))}

			<div className='max-w-6xl mx-auto'>
				{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
				{/* <div className='text-center mb-8'>
					<h1 className='text-3xl font-bold text-[var(--color)] mb-2 max-[375px]:text-[28px]'>
						–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç
					</h1>
					<p className='text-[var(--footer-text-color)] text-balance'>
						–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ —Å –º–∏—Ä–æ–º
					</p>
				</div> */}

				{/* –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º –∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º */}
				<div className='flex flex-wrap gap-2 mb-4 justify-center'>
					<button
						type='button'
						onClick={() => setShowPreview(false)}
						className={`px-4 py-2 rounded-lg border transition-colors ${
							!showPreview
								? 'bg-[var(--btn-bg)] text-[var(--btn-color)] border-[var(--line-color)]'
								: 'bg-[var(--post-bg)] text-[var(--color)] border-[var(--line-color)] hover:bg-[var(--hover-bg)]'
						}`}
					>
						üìù –†–µ–¥–∞–∫—Ç–æ—Ä
					</button>
					<button
						type='button'
						onClick={() => setShowPreview(true)}
						className={`px-4 py-2 rounded-lg border transition-colors ${
							showPreview
								? 'bg-[var(--btn-bg)] text-[var(--btn-color)] border-[var(--line-color)]'
								: 'bg-[var(--post-bg)] text-[var(--color)] border-[var(--line-color)] hover:bg-[var(--hover-bg)]'
						}`}
					>
						üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
					</button>
				</div>

				{!showPreview ? (
					/* –†–ï–î–ê–ö–¢–û–† */
					<form
						onSubmit={handleSubmit}
						className='bg-[var(--post-bg)] rounded-2xl shadow-lg p-6 border border-[var(--line-color)]'
					>
						{/* –ü–æ–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
						<div className='mb-6'>
							<label className='block text-sm font-medium text-[var(--color)] mb-2'>
								–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏ *
							</label>
							<input
								type='text'
								value={title}
								onChange={e => setTitle(e.target.value)}
								placeholder='–í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫...'
								className='w-full px-4 py-3 border border-[var(--line-color)] bg-[var(--bg)] text-[var(--color)] rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg placeholder-[var(--footer-text-color)]'
								required
							/>
						</div>

						{/* –ü–æ–ª–µ –º–∏–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏—è */}
						<div className='mb-6'>
							<label className='block text-sm font-medium text-[var(--color)] mb-2'>
								–ú–∏–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ *
							</label>
							<input
								type='text'
								value={miniDescription}
								onChange={e => setMiniDescription(e.target.value)}
								placeholder='–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏ –æ–ø–∏—Å–∞–Ω–∏–µ...'
								className='w-full px-4 py-3 border border-[var(--line-color)] bg-[var(--bg)] text-[var(--color)] rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-lg placeholder-[var(--footer-text-color)]'
								required
							/>
						</div>

						{/* –ü–æ–ª–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
						<div className='mb-6'>
							<label className='block text-sm font-medium text-[var(--color)] mb-2'>
								–ö–∞—Ç–µ–≥–æ—Ä–∏—è
							</label>
							<select
								value={postCategory}
								onChange={e => setPostCategory(e.target.value)}
								className='w-full px-4 py-3 border border-[var(--line-color)] bg-[var(--bg)] text-[var(--color)] rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent'
							>
								<option value=''>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
								{filterCategories.map(category => (
									<option key={category?.id} value={category?.id}>
										{category?.name}
									</option>
								))}
							</select>
						</div>

						{/* –ü–∞–Ω–µ–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
						<div className='mb-4'>
							<label className='block text-sm font-medium text-[var(--color)] mb-2'>
								–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ *
							</label>

							<div className='flex flex-wrap gap-2 mb-3 p-3 bg-[var(--bg)] rounded-lg border border-[var(--line-color)]'>
								{formatButtons.map((btn, index) => (
									<button
										key={index}
										type='button'
										onClick={() => insertFormat(btn.insert)}
										title={btn.tooltip}
										className='px-3 py-2 bg-[var(--post-bg)] border border-[var(--line-color)] text-[var(--color)] rounded-md text-sm hover:bg-[var(--hover-bg)] transition-colors'
									>
										{btn.symbol}
									</button>
								))}
							</div>

							<textarea
								value={fullDescription}
								onChange={e => setFullDescription(e.target.value)}
								placeholder='–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –∑–∞–º–µ—Ç–∫—É –∑–¥–µ—Å—å... –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
								className='w-full px-4 py-3 border border-[var(--line-color)] bg-[var(--bg)] text-[var(--color)] rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent min-h-[300px] font-mono text-sm placeholder-[var(--footer-text-color)]'
								required
							/>
						</div>

						{/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
						<div className='flex flex-wrap gap-4 pt-4 border-t border-[var(--line-color)] max-[597px]:justify-center'>
							<button
								type='button'
								onClick={() => navigate('/')}
								className='px-6 py-3 border border-[var(--line-color)] text-[var(--color)] bg-[var(--post-bg)] rounded-lg hover:bg-[var(--hover-bg)] transition-colors'
							>
								–û—Ç–º–µ–Ω–∞
							</button>

							<button
								type='button'
								onClick={() => setShowPreview(true)}
								className='px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors'
							>
								–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
							</button>

							<button
								type='submit'
								disabled={isLoading}
								className='px-6 py-3 bg-[var(--btn-bg)] text-[var(--btn-color)] rounded-lg hover:bg-[var(--btn-hover-bg)] hover:text-[var(--color)] disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center gap-2 border border-[var(--line-color)]'
							>
								{isLoading ? (
									<>
										<div className='w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin' />
										–ü—É–±–ª–∏–∫–∞—Ü–∏—è...
									</>
								) : (
									'–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É'
								)}
							</button>
						</div>
					</form>
				) : (
					/* –ü–†–ï–î–ü–†–û–°–ú–û–¢–† */
					<div className='bg-[var(--post-bg)] rounded-2xl shadow-lg p-6 border border-[var(--line-color)]'>
						<div className='flex justify-between items-center mb-6 max-[610px]:flex-wrap max-[610px]:justify-center max-[610px]:gap-4'>
							<h2 className='text-2xl font-bold text-[var(--color)] max-[340px]:text-center'>
								–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–∫–∏
							</h2>
							<button
								onClick={() => setShowPreview(false)}
								className='px-4 py-2 bg-[var(--btn-bg)] text-[var(--btn-color)] rounded-lg hover:bg-[var(--btn-hover-bg)] hover:text-[var(--color)] transition-colors border border-[var(--line-color)]'
							>
								–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é
							</button>
						</div>

						{/* –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ */}
						<div className='bg-[var(--bg)] rounded-lg p-6 border border-[var(--line-color)] min-h-[400px]'>
							{title ? (
								<h1 className='text-4xl font-bold text-[var(--color)] mb-4'>
									{title}
								</h1>
							) : (
								<p className='text-[var(--footer-text-color)] italic'>
									–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
								</p>
							)}

							{fullDescription ? (
								<div
									className='pt-10 text-[var(--color)] text-[19px] font-medium break-words max-[580px]:text-[16px] relative'
									dangerouslySetInnerHTML={{
										__html: formatText(fullDescription),
									}}
								/>
							) : (
								<p className='text-[var(--footer-text-color)] italic'>
									–ù–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
								</p>
							)}
						</div>

						{/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –≤ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–µ */}
						<div className='flex flex-wrap gap-4 pt-6 border-t border-[var(--line-color)] mt-6 max-[475px]:justify-center'>
							<button
								onClick={() => setShowPreview(false)}
								className='px-6 py-3 border border-[var(--line-color)] text-[var(--color)] bg-[var(--post-bg)] rounded-lg hover:bg-[var(--hover-bg)] transition-colors'
							>
								–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
							</button>

							<button
								onClick={handleSubmit}
								disabled={isLoading}
								className='px-6 py-3 bg-[var(--btn-bg)] text-[var(--btn-color)] rounded-lg hover:bg-[var(--btn-hover-bg)] hover:text-[var(--color)] disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center gap-2 border border-[var(--line-color)]'
							>
								{isLoading ? (
									<>
										<div className='w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin' />
										–ü—É–±–ª–∏–∫–∞—Ü–∏—è...
									</>
								) : (
									'–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É'
								)}
							</button>
						</div>
					</div>
				)}

				{/* –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞) */}
				{!showPreview && (
					<div className='mt-8 bg-[var(--post-bg)] rounded-lg p-6 border border-[var(--line-color)]'>
						<h3 className='font-semibold text-[var(--color)] mb-3'>
							üìù –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é:
						</h3>
						<div className='text-sm text-[var(--footer-text-color)] space-y-1'>
							<p>
								**–∂–∏—Ä–Ω—ã–π** ‚Üí{' '}
								<strong className='text-[var(--color)]'>–∂–∏—Ä–Ω—ã–π</strong>
							</p>
							<p>
								*–∫—É—Ä—Å–∏–≤* ‚Üí <em className='text-[var(--color)]'>–∫—É—Ä—Å–∏–≤</em>
							</p>
							<p>
								[—Ç–µ–∫—Å—Ç](url) ‚Üí{' '}
								<span className='text-blue-400 underline'>—Ç–µ–∫—Å—Ç</span>
							</p>
							<p>!(–æ–ø–∏—Å–∞–Ω–∏–µ)(url) ‚Üí –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</p>
							<p># –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí –±–æ–ª—å—à–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫</p>
							<p>## –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí —Å—Ä–µ–¥–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫</p>
							<p>### –ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí –º–∞–ª–µ–Ω—å–∫–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫</p>
							<p>- –ø—É–Ω–∫—Ç ‚Üí –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞</p>
						</div>
					</div>
				)}
			</div>
		</div>
	);
};
